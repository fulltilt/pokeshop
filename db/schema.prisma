// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?

  accounts      Account[]
  sessions      Session[]
  role          UserRole @default(CUSTOMER)
  orders        Order[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Item {
  id          Int         @id @default(autoincrement())
  name        String
  image       String
  price       Float
  description String
  quantity     Int
  category    CategoryType @default(BOX)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  name  String
  email String
  address       String
  city          String
  country       String
  zipCode       String
  total   Float
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
}

model OrderItem {
  id        Int         @id @default(autoincrement())
  orderId   Int
  itemId    Int
  quantity  Int
  price     Float
  order     Order       @relation(fields: [orderId], references: [id])
  item      Item @relation(fields: [itemId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum CategoryType {
  BOX
  SINGLE
}